<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<AgileJWebModel version="1.7.16.v20130804-1241">
    <type deep="true" elementName="TaskManager" isBinary="false" isDeprecated="false" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager">
        <filters>
            <filter signature="all classes"/>
            <filter signature="all types"/>
            <filter signature="classes with a default constructor"/>
            <filter signature="concrete classes"/>
            <filter signature="inner types named {type-name}" switchValues="TaskManager"/>
            <filter signature="members of package {package-name}" switchValues="parallel.test.broker"/>
            <filter signature="non java star package types"/>
            <filter signature="public types"/>
            <filter signature="source code types"/>
            <filter signature="top level source types"/>
            <filter signature="top level types"/>
            <filter signature="types named {type-name-pattern}" switchValues="TaskManager"/>
            <filter signature="types with static members"/>
        </filters>
        <outermostType>
            <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
        </outermostType>
        <field deep="true" elementName="webServiceExecutor" fieldLineTooltipDescription="TaskManager.webServiceExecutor&#10;references one&#10;ThreadPoolExecutor" isBinary="false" isDeprecated="false" modelMemberIdentifier="field:parallel.test.broker.TaskManager.webServiceExecutor" modifiers="private,static,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="webServiceExecutor"/>
                <filter signature="private fields"/>
                <filter signature="static fields"/>
            </filters>
            <declarer>
                <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
            </declarer>
            <rawType>
                <type deep="false" elementName="ThreadPoolExecutor" modelMemberIdentifier="type:java.util.concurrent.ThreadPoolExecutor" modifiers="public," packageName="java.util.concurrent" qualifiedName="java.util.concurrent.ThreadPoolExecutor"/>
            </rawType>
            <containedType>
                <type deep="false" elementName="ThreadPoolExecutor" modelMemberIdentifier="type:java.util.concurrent.ThreadPoolExecutor" modifiers="public," packageName="java.util.concurrent" qualifiedName="java.util.concurrent.ThreadPoolExecutor"/>
            </containedType>
        </field>
        <field deep="true" elementName="ejbExecutor" fieldLineTooltipDescription="TaskManager.ejbExecutor&#10;references one&#10;ThreadPoolExecutor" isBinary="false" isDeprecated="false" modelMemberIdentifier="field:parallel.test.broker.TaskManager.ejbExecutor" modifiers="private,static,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="ejbExecutor"/>
                <filter signature="private fields"/>
                <filter signature="static fields"/>
            </filters>
            <declarer>
                <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
            </declarer>
            <rawType>
                <type deep="false" elementName="ThreadPoolExecutor" modelMemberIdentifier="type:java.util.concurrent.ThreadPoolExecutor" modifiers="public," packageName="java.util.concurrent" qualifiedName="java.util.concurrent.ThreadPoolExecutor"/>
            </rawType>
            <containedType>
                <type deep="false" elementName="ThreadPoolExecutor" modelMemberIdentifier="type:java.util.concurrent.ThreadPoolExecutor" modifiers="public," packageName="java.util.concurrent" qualifiedName="java.util.concurrent.ThreadPoolExecutor"/>
            </containedType>
        </field>
        <field deep="true" elementName="CORE_POOL_SIZE" fieldLineTooltipDescription="TaskManager.CORE_POOL_SIZE&#10;references one&#10;int" isBinary="false" isDeprecated="false" modelMemberIdentifier="field:parallel.test.broker.TaskManager.CORE_POOL_SIZE" modifiers="private,static,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="CORE_POOL_SIZE"/>
                <filter signature="private fields"/>
                <filter signature="static fields"/>
            </filters>
            <declarer>
                <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
            </declarer>
            <rawType>
                <type deep="false" elementName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
            </rawType>
            <containedType>
                <type deep="false" elementName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
            </containedType>
        </field>
        <field deep="true" elementName="MAX_POOL_SIZE" fieldLineTooltipDescription="TaskManager.MAX_POOL_SIZE&#10;references one&#10;int" isBinary="false" isDeprecated="false" modelMemberIdentifier="field:parallel.test.broker.TaskManager.MAX_POOL_SIZE" modifiers="private,static,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="MAX_POOL_SIZE"/>
                <filter signature="private fields"/>
                <filter signature="static fields"/>
            </filters>
            <declarer>
                <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
            </declarer>
            <rawType>
                <type deep="false" elementName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
            </rawType>
            <containedType>
                <type deep="false" elementName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
            </containedType>
        </field>
        <field deep="true" elementName="KEEP_ALIVE_TIME" fieldLineTooltipDescription="TaskManager.KEEP_ALIVE_TIME&#10;references one&#10;int" isBinary="false" isDeprecated="false" modelMemberIdentifier="field:parallel.test.broker.TaskManager.KEEP_ALIVE_TIME" modifiers="private,static,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="KEEP_ALIVE_TIME"/>
                <filter signature="private fields"/>
                <filter signature="static fields"/>
            </filters>
            <declarer>
                <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
            </declarer>
            <rawType>
                <type deep="false" elementName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
            </rawType>
            <containedType>
                <type deep="false" elementName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
            </containedType>
        </field>
        <field deep="true" elementName="BLOCKING_QUEUE_CPACITY" fieldLineTooltipDescription="TaskManager.BLOCKING_QUEUE_CPACITY&#10;references one&#10;int" isBinary="false" isDeprecated="false" modelMemberIdentifier="field:parallel.test.broker.TaskManager.BLOCKING_QUEUE_CPACITY" modifiers="private,static,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="BLOCKING_QUEUE_CPACITY"/>
                <filter signature="private fields"/>
                <filter signature="static fields"/>
            </filters>
            <declarer>
                <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
            </declarer>
            <rawType>
                <type deep="false" elementName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
            </rawType>
            <containedType>
                <type deep="false" elementName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
            </containedType>
        </field>
        <method deep="true" elementName="init" isBinary="false" isDeprecated="false" modelMemberIdentifier="method:parallel.test.broker.TaskManager.init(()V)" modifiers="public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="init"/>
                <filter signature="methods of {method-owner}" switchValues="TaskManager"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
            </declarer>
            <return>
                <type deep="false" elementName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
            </return>
        </method>
        <method deep="true" elementName="shutdown" isBinary="false" isDeprecated="false" modelMemberIdentifier="method:parallel.test.broker.TaskManager.shutdown(()V)" modifiers="public,static,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="shutdown"/>
                <filter signature="methods of {method-owner}" switchValues="TaskManager"/>
                <filter signature="public methods"/>
                <filter signature="static methods"/>
            </filters>
            <declarer>
                <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
            </declarer>
            <return>
                <type deep="false" elementName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
            </return>
        </method>
        <method deep="true" elementName="processRequest" isBinary="false" isDeprecated="false" modelMemberIdentifier="method:parallel.test.broker.TaskManager.processRequest((QList&lt;QRequest;&gt;;)QMap&lt;QRequest;QResponse;&gt;;)" modifiers="public,static," parameterNames="requests">
            <filters>
                <filter signature="all methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="processRequest"/>
                <filter signature="methods of {method-owner}" switchValues="TaskManager"/>
                <filter signature="public methods"/>
                <filter signature="static methods"/>
            </filters>
            <declarer>
                <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
            </declarer>
            <parameterTypes>
                <type deep="false" elementName="List" modelMemberIdentifier="type:java.util.List&lt;parallel.test.message.Request&gt;" modifiers="abstract,public," packageName="java.util" qualifiedName="java.util.List&lt;parallel.test.message.Request&gt;"/>
            </parameterTypes>
            <return>
                <type deep="false" elementName="Map" modelMemberIdentifier="type:java.util.Map&lt;parallel.test.message.Request, parallel.test.message.Response&gt;" modifiers="abstract,public," packageName="java.util" qualifiedName="java.util.Map&lt;parallel.test.message.Request, parallel.test.message.Response&gt;"/>
            </return>
        </method>
        <method deep="true" elementName="processInParallel" isBinary="false" isDeprecated="false" modelMemberIdentifier="method:parallel.test.broker.TaskManager.processInParallel((QList&lt;QTask;&gt;;)QMap&lt;QRequest;QResponse;&gt;;)" modifiers="public," parameterNames="tasks">
            <filters>
                <filter signature="all methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="processInParallel"/>
                <filter signature="methods of {method-owner}" switchValues="TaskManager"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
            </declarer>
            <parameterTypes>
                <type deep="false" elementName="List" modelMemberIdentifier="type:java.util.List&lt;parallel.test.task.Task&gt;" modifiers="abstract,public," packageName="java.util" qualifiedName="java.util.List&lt;parallel.test.task.Task&gt;"/>
            </parameterTypes>
            <return>
                <type deep="false" elementName="Map" modelMemberIdentifier="type:java.util.Map&lt;parallel.test.message.Request, parallel.test.message.Response&gt;" modifiers="abstract,public," packageName="java.util" qualifiedName="java.util.Map&lt;parallel.test.message.Request, parallel.test.message.Response&gt;"/>
            </return>
        </method>
        <method deep="true" elementName="createErrorResponse" isBinary="false" isDeprecated="false" modelMemberIdentifier="method:parallel.test.broker.TaskManager.createErrorResponse((QMap&lt;QRequest;QResponse;&gt;;QRequest;QException;)V)" modifiers="private," parameterNames="responseMap,request,e">
            <filters>
                <filter signature="all methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="createErrorResponse"/>
                <filter signature="methods of {method-owner}" switchValues="TaskManager"/>
                <filter signature="private methods"/>
            </filters>
            <declarer>
                <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
            </declarer>
            <parameterTypes>
                <type deep="false" elementName="Map" modelMemberIdentifier="type:java.util.Map&lt;parallel.test.message.Request, parallel.test.message.Response&gt;" modifiers="abstract,public," packageName="java.util" qualifiedName="java.util.Map&lt;parallel.test.message.Request, parallel.test.message.Response&gt;"/>
                <type deep="false" elementName="Request" modelMemberIdentifier="type:parallel.test.message.Request" modifiers="abstract,public," packageName="parallel.test.message" qualifiedName="parallel.test.message.Request"/>
                <type deep="false" elementName="Exception" modelMemberIdentifier="type:java.lang.Exception" modifiers="public," packageName="java.lang" qualifiedName="java.lang.Exception"/>
            </parameterTypes>
            <return>
                <type deep="false" elementName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
            </return>
        </method>
        <method deep="true" elementName="getExecutor" isBinary="false" isDeprecated="false" modelMemberIdentifier="method:parallel.test.broker.TaskManager.getExecutor((QRequest.REQUEST_TYPE;)QThreadPoolExecutor;)" modifiers="private," parameterNames="requestType">
            <filters>
                <filter signature="all methods"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getExecutor"/>
                <filter signature="methods of {method-owner}" switchValues="TaskManager"/>
                <filter signature="private methods"/>
            </filters>
            <declarer>
                <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
            </declarer>
            <parameterTypes>
                <type deep="false" elementName="REQUEST_TYPE" modelMemberIdentifier="type:parallel.test.message.Request$REQUEST_TYPE" modifiers="public," packageName="parallel.test.message" qualifiedName="parallel.test.message.Request$REQUEST_TYPE"/>
            </parameterTypes>
            <return>
                <type deep="false" elementName="ThreadPoolExecutor" modelMemberIdentifier="type:java.util.concurrent.ThreadPoolExecutor" modifiers="public," packageName="java.util.concurrent" qualifiedName="java.util.concurrent.ThreadPoolExecutor"/>
            </return>
        </method>
        <method deep="true" elementName="main" isBinary="false" isDeprecated="false" modelMemberIdentifier="method:parallel.test.broker.TaskManager.main(([QString;)V)" modifiers="public,static," parameterNames="args">
            <filters>
                <filter signature="all methods"/>
                <filter signature="main methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="main"/>
                <filter signature="methods of {method-owner}" switchValues="TaskManager"/>
                <filter signature="public methods"/>
                <filter signature="static methods"/>
            </filters>
            <declarer>
                <type deep="false" elementName="TaskManager" modelMemberIdentifier="type:parallel.test.broker.TaskManager" modifiers="public," packageName="parallel.test.broker" qualifiedName="parallel.test.broker.TaskManager"/>
            </declarer>
            <parameterTypes>
                <type deep="false" elementName="String" modelMemberIdentifier="type:java.lang.String[]" modifiers="final,public," packageName="java.lang" qualifiedName="java.lang.String[]"/>
            </parameterTypes>
            <return>
                <type deep="false" elementName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
            </return>
        </method>
        <nonRecursiveSubtypes/>
        <nonRecursiveSupertypes>
            <type deep="false" elementName="Object" modelMemberIdentifier="type:java.lang.Object" modifiers="public," packageName="java.lang" qualifiedName="java.lang.Object"/>
        </nonRecursiveSupertypes>
        <outwardDependencies>
            <type deep="false" elementName="TimeUnit" modelMemberIdentifier="type:java.util.concurrent.TimeUnit" modifiers="abstract,public," packageName="java.util.concurrent" qualifiedName="java.util.concurrent.TimeUnit"/>
            <type deep="false" elementName="Exception" modelMemberIdentifier="type:java.lang.Exception" modifiers="public," packageName="java.lang" qualifiedName="java.lang.Exception"/>
            <type deep="false" elementName="IllegalArgumentException" modelMemberIdentifier="type:java.lang.IllegalArgumentException" modifiers="public," packageName="java.lang" qualifiedName="java.lang.IllegalArgumentException"/>
            <type deep="false" elementName="Iterator" modelMemberIdentifier="type:java.util.Iterator" modifiers="abstract,public," packageName="java.util" qualifiedName="java.util.Iterator"/>
            <type deep="false" elementName="Request" modelMemberIdentifier="type:parallel.test.message.Request" modifiers="abstract,public," packageName="parallel.test.message" qualifiedName="parallel.test.message.Request"/>
            <type deep="false" elementName="MBPRequest" modelMemberIdentifier="type:parallel.test.message.MBPRequest" modifiers="public," packageName="parallel.test.message" qualifiedName="parallel.test.message.MBPRequest"/>
            <type deep="false" elementName="TimeoutException" modelMemberIdentifier="type:java.util.concurrent.TimeoutException" modifiers="public," packageName="java.util.concurrent" qualifiedName="java.util.concurrent.TimeoutException"/>
            <type deep="false" elementName="MBPResponse" modelMemberIdentifier="type:parallel.test.message.MBPResponse" modifiers="public," packageName="parallel.test.message" qualifiedName="parallel.test.message.MBPResponse"/>
            <type deep="false" elementName="UUSDRequest" modelMemberIdentifier="type:parallel.test.message.UUSDRequest" modifiers="public," packageName="parallel.test.message" qualifiedName="parallel.test.message.UUSDRequest"/>
            <type deep="false" elementName="List" modelMemberIdentifier="type:java.util.List" modifiers="abstract,public," packageName="java.util" qualifiedName="java.util.List"/>
            <type deep="false" elementName="ErrorResponse" modelMemberIdentifier="type:parallel.test.message.ErrorResponse" modifiers="public," packageName="parallel.test.message" qualifiedName="parallel.test.message.ErrorResponse"/>
            <type deep="false" elementName="URHResponse" modelMemberIdentifier="type:parallel.test.message.URHResponse" modifiers="public," packageName="parallel.test.message" qualifiedName="parallel.test.message.URHResponse"/>
            <type deep="false" elementName="System" modelMemberIdentifier="type:java.lang.System" modifiers="final,public," packageName="java.lang" qualifiedName="java.lang.System"/>
            <type deep="false" elementName="InterruptedException" modelMemberIdentifier="type:java.lang.InterruptedException" modifiers="public," packageName="java.lang" qualifiedName="java.lang.InterruptedException"/>
            <type deep="false" elementName="Future" modelMemberIdentifier="type:java.util.concurrent.Future" modifiers="abstract,public," packageName="java.util.concurrent" qualifiedName="java.util.concurrent.Future"/>
            <type deep="false" elementName="CancellationException" modelMemberIdentifier="type:java.util.concurrent.CancellationException" modifiers="public," packageName="java.util.concurrent" qualifiedName="java.util.concurrent.CancellationException"/>
            <type deep="false" elementName="Collections" modelMemberIdentifier="type:java.util.Collections" modifiers="public," packageName="java.util" qualifiedName="java.util.Collections"/>
            <type deep="false" elementName="Map" modelMemberIdentifier="type:java.util.Map" modifiers="abstract,public," packageName="java.util" qualifiedName="java.util.Map"/>
            <type deep="false" elementName="Response" modelMemberIdentifier="type:parallel.test.message.Response" modifiers="abstract,public," packageName="parallel.test.message" qualifiedName="parallel.test.message.Response"/>
            <type deep="false" elementName="RuntimeException" modelMemberIdentifier="type:java.lang.RuntimeException" modifiers="public," packageName="java.lang" qualifiedName="java.lang.RuntimeException"/>
            <type deep="false" elementName="AuthThreadFactory" modelMemberIdentifier="type:parallel.test.pool.AuthThreadFactory" modifiers="public," packageName="parallel.test.pool" qualifiedName="parallel.test.pool.AuthThreadFactory"/>
            <type deep="false" elementName="ThreadPoolExecutor" modelMemberIdentifier="type:java.util.concurrent.ThreadPoolExecutor" modifiers="public," packageName="java.util.concurrent" qualifiedName="java.util.concurrent.ThreadPoolExecutor"/>
            <type deep="false" elementName="URHRequest" modelMemberIdentifier="type:parallel.test.message.URHRequest" modifiers="public," packageName="parallel.test.message" qualifiedName="parallel.test.message.URHRequest"/>
            <type deep="false" elementName="String" modelMemberIdentifier="type:java.lang.String" modifiers="final,public," packageName="java.lang" qualifiedName="java.lang.String"/>
            <type deep="false" elementName="Task" modelMemberIdentifier="type:parallel.test.task.Task" modifiers="abstract,public," packageName="parallel.test.task" qualifiedName="parallel.test.task.Task"/>
            <type deep="false" elementName="AuthThreadPoolExecutor" modelMemberIdentifier="type:parallel.test.pool.AuthThreadPoolExecutor" modifiers="public," packageName="parallel.test.pool" qualifiedName="parallel.test.pool.AuthThreadPoolExecutor"/>
            <type deep="false" elementName="ExecutionException" modelMemberIdentifier="type:java.util.concurrent.ExecutionException" modifiers="public," packageName="java.util.concurrent" qualifiedName="java.util.concurrent.ExecutionException"/>
            <type deep="false" elementName="REQUEST_TYPE" modelMemberIdentifier="type:parallel.test.message.Request.REQUEST_TYPE" modifiers="public," packageName="parallel.test.message" qualifiedName="parallel.test.message.Request.REQUEST_TYPE"/>
        </outwardDependencies>
    </type>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAB/0lEQVR4nJ2U70taYRTH/R/6F3qbiwVBDe4ititThiJiFiXaQjebzL2Zm9PwbpVFos2g8gfOZGxBIK1L1Kg5MCh8MbZFL1xkbEGjelP2xpff7vOIcteUXT1wOM95nnM/zznnOVyZ7Jp8PdrDQPwpVCETOsY1UE4bqU/2r8dKFm41RGEP3z2BM/W8osRve3Uf5Lwh6E2vAhzvwfL3JWQOvmD7cIvaxE4UXt6L5mdMfXBSJsn0RcqJ9P4Gqsnmz094+dFFM5fclr6oA+aEFW93IhXQRm4Nb9J+8LvL1P99/gu+9TEa9yDplAZmg0ZoZ42Iby9QyMFZHqa4paL29w5YkzaqvWEzSLwkMCmvdYRFMF3KeCufhdxzFy3uO1TJuo27h/ZRJZgJtbBWSc/4lk8tTICPgo/Oj3F7UgvGp6GazKaw9I2HIWaHImiQnjHpGTOhgTFmQ6F4WXqsXAbDH1wIfC5VcVEsYEA4186a8HiRkwbOnebpKOnmzMJkcNgXeiyWP4UT+DdnYAgP0TjxVIjjqsJH+GnI3SzYQA9MiUdwr4xibN1PLfF7BGj7azVInBgqszRRDWcWal9APrrhYYVyB6GPDEEvwIglPtkXQ8XgyA87mLnOvy74B07K1M3b0DVpQPdUH7X9ser/CjG4rOUKJL1BLakr40bA/+1xo/BqwCtkVQA98MkVlAAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="type:parallel.test.broker.TaskManager" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAZ0lEQVR4nGNgoBD8B4IPe47/P86kC8YgNghQai7YYJCBMABjU91gGKCKwTQLCmRAs6AgaPANJ///6BiXwc96F8CDAsQmaPDj8gawIhCNy2CSAcggZEBVg2Euft4xgboGExPGo2AYAgDWP9D+w7zfUAAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="field:parallel.test.broker.TaskManager.BLOCKING_QUEUE_CPACITY" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAZ0lEQVR4nGNgoBD8B4IPe47/P86kC8YgNghQai7YYJCBMABjU91gGKCKwTQLCmRAs6AgaPANJ///6BiXwc96F8CDAsQmaPDj8gawIhCNy2CSAcggZEBVg2Euft4xgboGExPGo2AYAgDWP9D+w7zfUAAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="field:parallel.test.broker.TaskManager.CORE_POOL_SIZE" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAZ0lEQVR4nGNgoBD8B4IPe47/P86kC8YgNghQai7YYJCBMABjU91gGKCKwTQLCmRAs6AgaPANJ///6BiXwc96F8CDAsQmaPDj8gawIhCNy2CSAcggZEBVg2Euft4xgboGExPGo2AYAgDWP9D+w7zfUAAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="field:parallel.test.broker.TaskManager.KEEP_ALIVE_TIME" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAZ0lEQVR4nGNgoBD8B4IPe47/P86kC8YgNghQai7YYJCBMABjU91gGKCKwTQLCmRAs6AgaPANJ///6BiXwc96F8CDAsQmaPDj8gawIhCNy2CSAcggZEBVg2Euft4xgboGExPGo2AYAgDWP9D+w7zfUAAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="field:parallel.test.broker.TaskManager.MAX_POOL_SIZE" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAZ0lEQVR4nGNgoBD8B4IPe47/P86kC8YgNghQai7YYJCBMABjU91gGKCKwTQLCmRAs6AgaPANJ///6BiXwc96F8CDAsQmaPDj8gawIhCNy2CSAcggZEBVg2Euft4xgboGExPGo2AYAgDWP9D+w7zfUAAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="field:parallel.test.broker.TaskManager.ejbExecutor" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAZ0lEQVR4nGNgoBD8B4IPe47/P86kC8YgNghQai7YYJCBMABjU91gGKCKwTQLCmRAs6AgaPANJ///6BiXwc96F8CDAsQmaPDj8gawIhCNy2CSAcggZEBVg2Euft4xgboGExPGo2AYAgDWP9D+w7zfUAAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="field:parallel.test.broker.TaskManager.webServiceExecutor" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAdklEQVR4nGNgGAWjgChw0t3uPy5MmcHONv+/TerDwCBxygy2swIb9LWmBo7BBgPFKTL4hIHJ/69lDf8/+sb8/wTEIBrEB4lTZrCm4f+3zc3/nyckAHEiGIP4JzQNKDRYVuf/88ndGBgkTpnBklr/cWGKDB6ZAABi/X0KTJJ1eQAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:parallel.test.broker.TaskManager.createErrorResponse((QMap&lt;QRequest;QResponse;&gt;;QRequest;QException;)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAdklEQVR4nGNgGAWjgChw0t3uPy5MmcHONv+/TerDwCBxygy2swIb9LWmBo7BBgPFKTL4hIHJ/69lDf8/+sb8/wTEIBrEB4lTZrCm4f+3zc3/nyckAHEiGIP4JzQNKDRYVuf/88ndGBgkTpnBklr/cWGKDB6ZAABi/X0KTJJ1eQAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:parallel.test.broker.TaskManager.getExecutor((QRequest.REQUEST_TYPE;)QThreadPoolExecutor;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAuElEQVR4nGNgGAXDD5Run/CftdHzv97UhP8gNlUM9V1c/D9+Vcn/LZfm/p9xbAKYDRKjyNDCbb3/w5YX/F99fiYSngEWA8mRbTBzg8f/pr1N/1v2tSDw/hawGEiObINle8L+J60Cum5jGRSXgmmQGEiObINT1rX+t58R/79jZ+P/jh2N/zuBGMS2n57wHyRHtsEg4Dwn57/X7NT/0/d2/G/aWg9mg8QoMhQG8jd2wZMbiE0VQ0cmAAD3yYO+kqE/HwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:parallel.test.broker.TaskManager.init(()V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA60lEQVR4nGNgoBD8B4IPe47/P86kC8YgNghQai7YYJCBMABjU91gGKCKwTQLCmRAMChKt0/4z9ro+V9vasJ/EBufwUSHse/i4v/xq0r+b7k09/+MYxPAbJAYLoOf9S6ABwWIjdXgwm29/8OWF/xffX4mEp4BFgPJEQwbXIC5weN/096m/y37WhB4fwtYDCRHtsGyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAACsAQ7VtE42GgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:parallel.test.broker.TaskManager.main(([QString;)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAuElEQVR4nGNgGAXDD5Run/CftdHzv97UhP8gNlUM9V1c/D9+Vcn/LZfm/p9xbAKYDRKjyNDCbb3/w5YX/F99fiYSngEWA8mRbTBzg8f/pr1N/1v2tSDw/hawGEiObINle8L+J60Cum5jGRSXgmmQGEiObINT1rX+t58R/79jZ+P/jh2N/zuBGMS2n57wHyRHtsEg4Dwn57/X7NT/0/d2/G/aWg9mg8QoMhQG8jd2wZMbiE0VQ0cmAAD3yYO+kqE/HwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:parallel.test.broker.TaskManager.processInParallel((QList&lt;QTask;&gt;;)QMap&lt;QRequest;QResponse;&gt;;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA60lEQVR4nGNgoBD8B4IPe47/P86kC8YgNghQai7YYJCBMABjU91gGKCKwTQLCmRAMChKt0/4z9ro+V9vasJ/EBufwUSHse/i4v/xq0r+b7k09/+MYxPAbJAYLoOf9S6ABwWIjdXgwm29/8OWF/xffX4mEp4BFgPJEQwbXIC5weN/096m/y37WhB4fwtYDCRHtsGyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAACsAQ7VtE42GgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:parallel.test.broker.TaskManager.processRequest((QList&lt;QRequest;&gt;;)QMap&lt;QRequest;QResponse;&gt;;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA60lEQVR4nGNgoBD8B4IPe47/P86kC8YgNghQai7YYJCBMABjU91gGKCKwTQLCmRAMChKt0/4z9ro+V9vasJ/EBufwUSHse/i4v/xq0r+b7k09/+MYxPAbJAYLoOf9S6ABwWIjdXgwm29/8OWF/xffX4mEp4BFgPJEQwbXIC5weN/096m/y37WhB4fwtYDCRHtsGyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAACsAQ7VtE42GgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:parallel.test.broker.TaskManager.shutdown(()V)" width="22"/>
</AgileJWebModel>
