<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<AgileJWebModel version="1.7.16.v20130804-1241">
    <type deep="true" elementName="Task" isBinary="false" isDeprecated="false" modelMemberIdentifier="type:parallel.test.task.Task" modifiers="abstract,public," packageName="parallel.test.task" qualifiedName="parallel.test.task.Task">
        <filters>
            <filter signature="abstract classes"/>
            <filter signature="all classes"/>
            <filter signature="all types"/>
            <filter signature="classes with a default constructor"/>
            <filter signature="inner types named {type-name}" switchValues="Task"/>
            <filter signature="members of package {package-name}" switchValues="parallel.test.task"/>
            <filter signature="non java star package types"/>
            <filter signature="public types"/>
            <filter signature="source code types"/>
            <filter signature="top level source types"/>
            <filter signature="top level types"/>
            <filter signature="types named {type-name-pattern}" switchValues="Task"/>
        </filters>
        <outermostType>
            <type deep="false" elementName="Task" modelMemberIdentifier="type:parallel.test.task.Task" modifiers="abstract,public," packageName="parallel.test.task" qualifiedName="parallel.test.task.Task"/>
        </outermostType>
        <method deep="true" elementName="setConectionParam" isBinary="false" isDeprecated="false" modelMemberIdentifier="method:parallel.test.task.Task.setConectionParam((QString;QString;QString;)V)" modifiers="abstract,public," parameterNames="connUrl,userName,password">
            <filters>
                <filter signature="all methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="setConectionParam"/>
                <filter signature="methods of {method-owner}" switchValues="Task"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
                <filter signature="setter methods"/>
            </filters>
            <declarer>
                <type deep="false" elementName="Task" modelMemberIdentifier="type:parallel.test.task.Task" modifiers="abstract,public," packageName="parallel.test.task" qualifiedName="parallel.test.task.Task"/>
            </declarer>
            <parameterTypes>
                <type deep="false" elementName="String" modelMemberIdentifier="type:java.lang.String" modifiers="final,public," packageName="java.lang" qualifiedName="java.lang.String"/>
                <type deep="false" elementName="String" modelMemberIdentifier="type:java.lang.String" modifiers="final,public," packageName="java.lang" qualifiedName="java.lang.String"/>
                <type deep="false" elementName="String" modelMemberIdentifier="type:java.lang.String" modifiers="final,public," packageName="java.lang" qualifiedName="java.lang.String"/>
            </parameterTypes>
            <return>
                <type deep="false" elementName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
            </return>
        </method>
        <method deep="true" elementName="setRequest" isBinary="false" isDeprecated="false" modelMemberIdentifier="method:parallel.test.task.Task.setRequest((QRequest;)V)" modifiers="abstract,public," parameterNames="request">
            <filters>
                <filter signature="all methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="setRequest"/>
                <filter signature="methods of {method-owner}" switchValues="Task"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
                <filter signature="setter methods"/>
            </filters>
            <declarer>
                <type deep="false" elementName="Task" modelMemberIdentifier="type:parallel.test.task.Task" modifiers="abstract,public," packageName="parallel.test.task" qualifiedName="parallel.test.task.Task"/>
            </declarer>
            <parameterTypes>
                <type deep="false" elementName="Request" modelMemberIdentifier="type:parallel.test.message.Request" modifiers="abstract,public," packageName="parallel.test.message" qualifiedName="parallel.test.message.Request"/>
            </parameterTypes>
            <return>
                <type deep="false" elementName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
            </return>
        </method>
        <method deep="true" elementName="getRequest" isBinary="false" isDeprecated="false" modelMemberIdentifier="method:parallel.test.task.Task.getRequest(()QRequest;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getRequest"/>
                <filter signature="methods of {method-owner}" switchValues="Task"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" elementName="Task" modelMemberIdentifier="type:parallel.test.task.Task" modifiers="abstract,public," packageName="parallel.test.task" qualifiedName="parallel.test.task.Task"/>
            </declarer>
            <return>
                <type deep="false" elementName="Request" modelMemberIdentifier="type:parallel.test.message.Request" modifiers="abstract,public," packageName="parallel.test.message" qualifiedName="parallel.test.message.Request"/>
            </return>
        </method>
        <method deep="true" elementName="call" isBinary="false" isDeprecated="false" modelMemberIdentifier="method:parallel.test.task.Task.call(()QResponse;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="call"/>
                <filter signature="methods of {method-owner}" switchValues="Task"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" elementName="Task" modelMemberIdentifier="type:parallel.test.task.Task" modifiers="abstract,public," packageName="parallel.test.task" qualifiedName="parallel.test.task.Task"/>
            </declarer>
            <exceptions>
                <type deep="false" elementName="Exception" modelMemberIdentifier="type:java.lang.Exception" modifiers="public," packageName="java.lang" qualifiedName="java.lang.Exception"/>
            </exceptions>
            <return>
                <type deep="false" elementName="Response" modelMemberIdentifier="type:parallel.test.message.Response" modifiers="abstract,public," packageName="parallel.test.message" qualifiedName="parallel.test.message.Response"/>
            </return>
        </method>
        <nonRecursiveSubtypes>
            <type deep="false" elementName="MBPTask" modelMemberIdentifier="type:parallel.test.task.MBPTask" modifiers="public," packageName="parallel.test.task" qualifiedName="parallel.test.task.MBPTask"/>
            <type deep="false" elementName="URHTask" modelMemberIdentifier="type:parallel.test.task.URHTask" modifiers="public," packageName="parallel.test.task" qualifiedName="parallel.test.task.URHTask"/>
            <type deep="false" elementName="UUSDTask" modelMemberIdentifier="type:parallel.test.task.UUSDTask" modifiers="public," packageName="parallel.test.task" qualifiedName="parallel.test.task.UUSDTask"/>
        </nonRecursiveSubtypes>
        <nonRecursiveSupertypes>
            <type deep="false" elementName="Callable" modelMemberIdentifier="type:java.util.concurrent.Callable" modifiers="abstract,public," packageName="java.util.concurrent" qualifiedName="java.util.concurrent.Callable"/>
            <type deep="false" elementName="Object" modelMemberIdentifier="type:java.lang.Object" modifiers="public," packageName="java.lang" qualifiedName="java.lang.Object"/>
        </nonRecursiveSupertypes>
        <outwardDependencies>
            <type deep="false" elementName="Exception" modelMemberIdentifier="type:java.lang.Exception" modifiers="public," packageName="java.lang" qualifiedName="java.lang.Exception"/>
            <type deep="false" elementName="String" modelMemberIdentifier="type:java.lang.String" modifiers="final,public," packageName="java.lang" qualifiedName="java.lang.String"/>
            <type deep="false" elementName="Response" modelMemberIdentifier="type:parallel.test.message.Response" modifiers="abstract,public," packageName="parallel.test.message" qualifiedName="parallel.test.message.Response"/>
            <type deep="false" elementName="Request" modelMemberIdentifier="type:parallel.test.message.Request" modifiers="abstract,public," packageName="parallel.test.message" qualifiedName="parallel.test.message.Request"/>
        </outwardDependencies>
    </type>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAACAklEQVR4nO1U30tTcRT3j+hP6FWTBEmCFZJXVGJjiC7RsamorSR7aTU32c0f0xpOJ/hzzDWiAmGoF8nQFigoPkQRPSxxYkKRvuh68fHT95xxL7vbHOGzHzic7znfcz98zrnn3qKiLHw+/I6W8GPUBW2oGDKhdszKMeWza1VA4IrrBrn8NfJKkMm6Xj+CM/ZUM4rLnt8F3ecj7Y0HmZh8Djk9dN1bDVnxYPHrAjb2PmFrf5N9ZHsOXsWLq08MOeSZanNUU5uk9FnMifjuGvJh/ccH9C65WHnmWAoSN831wB7pxPz2rEa0lniP8bgfyrdFjn+eHMC3Osh1bVEnssegmm4cUsAK86QV4a1XnNw7TsIW7tCs+00POqMOtnszdlB9tloVOtXUXmmfhEA8rXgzuYMSTxWK3XfY6Fwm16B8oBaGYaM412nEpS9MOmI11hTf9BnFBvg4eXjyC7dGzDD4TGzRnRgWviiwhLpRHbDoFJ8HJqaZGYZNsIYcSJ39Tb+sxAYevHVh9GO6i9OzFFrEvXnShofv5HN3WofEUZJXqX7KLjZDxq6YcSZ+p/7Avz4By0w71xX6WHLQp4yhxC1BGm2ELXIf7uUBDK762VPcKEjL+42guv8mzSS/5pFEu61omG1HgyAjTzHlL0Sqgtqsn3bg9ogFlS+b2DeHCv8rLlEQ/wA8uSRbus8E5gAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="type:parallel.test.task.Task" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:parallel.test.task.Task.call(()QResponse;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:parallel.test.task.Task.getRequest(()QRequest;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:parallel.test.task.Task.setConectionParam((QString;QString;QString;)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:parallel.test.task.Task.setRequest((QRequest;)V)" width="22"/>
</AgileJWebModel>
